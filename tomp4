#!/bin/bash
# tomp4 V0.3.0
# Copyright (c) 2015 Written by Mark Coccimiglio (mark@coccimiglio.net)
# Free for non-commercial use.  If you are making money on the use of this
# script then contact me with a reasonable offer for licensing.
#
# This script was originally created to help automate the encoding of video
# files for Chromecast.  Chromecast has a very limited set of codecs and
# container formats that it supports.  This script by default relocates the
# "moov" atom to the begining of the file for faster loads when streaming.
# Additionally, I found that many video files have weak auto levels for use
# with Chromecast.  By default we encode with higher audio line levels.
#

_version='0.3.0'
_name='tomp4'
_dest_dir="$HOME/mp4"
_vcodec="h264"
_acodec="aac"
_hwaccel1=''
_hwaccel2=''
_af1='-af'
_af2='volume=3'
_vstream='0'
_astream='0'
_sstream='0'
_vf=''
_scale_vid=""
_vpreset="medium"
_meta1=''
_meta2=''
_sub1=''
_sub2=''
_sub3=''
_sub4=''
_title1=''
_title2=''
_burnin1=''
_burnin2=''
_level=''

# If we have an available CUDA hardware encoder we will have a preference for that.

ffmpeg -codecs 2> /dev/null | grep -q h264_nvenc  && _vcodec='h264_nvenc'

# Care must be taken if this is enabled.  This forces the Input stream to be handled
# by a specific hardware decoder.  If the input stream codec is not a supported by the
# hardware decoder then ffmpeg may, ignore it, fault out or corrupt the input stream.  YMMV.

#ffmpeg -hwaccels 2> /dev/null | grep -q cuvid && _hwaccel1='-hwaccel'
#if [ $_hwaccel1 != '' ] ; then _hwaccel2='nvdec' ; fi

for opt in "$@"
do

case $opt in
  -h)
  echo "tomp4 Version: $_version Copyright (c) 2017 by Mark Coccimiglio"
  echo 'Usage: tomp4 [-c] [-d=/path/to/folder] [-264] [-480|-576|-720|-1080] sourcefile1.ext sourcefile2.ext ...'
  echo '  -cv  Do not Transcode Video.  Copy Video Codec from Source.'
  echo '  -ca  Do not Transcode Audio.  Copy Audio Codec from Source.'
  echo '  -av=# Select alternate Video Stream'
  echo '  -as=# Select alternate Audio Stream'
  echo '        options -ss requires placment BEFORE -sub'
  echo '  -level Process Audio volume levels for file(s) ... '
  echo '  -vol=# Set Audio Volume level.  Default=3'
  echo '  -ss=# Select alternate Subtitle Stream'
  echo '  -d=/path/to/destination/folder  Destination directory (Default: $HOME/mp4)'
  echo '  -264 | -soft | -soft264  Force H.264 (libx264) software encoding.'
  echo '  -vpreset= ultrafast,superfast, veryfast, faster, fast, medium, slow, slower, veryslow, placebo'
  echo '            default=medium'
  echo '  -stripmeta   Strip metadata from stream. Default is to passthrough metadata.'
  echo '  -sub  Include first Sub-Title Stream (graphical subtitles)'
  echo '  -burn|burnin Burnin subtitles from first subtitle stream (text subtitles)'
  echo '  -subfile=/path/to/subtile/text/file Burnin subtitles from external text file'
  echo '  -title="<Title>" Force Title metadata (Note: only encodes first file, rest are ignored)'
  echo '  -fr=<rate>|-framerate=<rate> Encode framerate at <rate>'
  echo
  echo '  -480 | -576 | -720 | -1080 Force destination file to 480, 576, 720 or 1080 lines.'
  echo '  -640 | -800 | -1280 | -1920 Force destination file to 640, 800, 1280 or 1920 columns.'
  echo '   Scale columns/row to match aspect ratio'
  echo '             (Default: keep original size)'
  echo '  -resize=<width>:<height>  Force destination to specific size (Add black bars as necessary) '
  echo '     Note <width>x<height> also works.'
  echo
  echo '  -debug | --debug  Show ffmpeg command line to run '
  echo
  echo 'tomp4 is used to automate/batch the transcoding of videos to a'
  echo 'Chromecast compatable Video Format.'
  echo
  ;;

# Set DEBUG
  -debug|--debug)
  _DEBUG='echo'
  ;;

# Copy original Video codec data into new file unchanged.
# This assumes codec compatibility between old and new container.
  -cv)
  _vcodec="copy"
  _vf=''
  _scale_vid=''
  _hwaccel1=''
  _hwaccel2=''
  ;;

# Copy original Audio codec data into new file unchanged.
# This assumes codec compatibility between old and new container.
  -ca)
  _acodec="copy"
  _af1=''
  _af2=''
  ;;

# Set Volume level.  Default: 3
# Note Volume scale is logrythmic
 -vol=*|--vol=*)
  _af1='-af'
  _af2="volume=${opt#*=}"
 ;;

# This forces H.264 software codec (libx264).
  -264|-soft|--soft|-soft264|--soft264)
  _vcodec="libx264"
  ;;

# Normaly original metadata is preserved.  With this option ALL legacy metadata is stripped.
  -stripmeta|--stripmeta|-stripmetadata|--stripmetadata)
   _meta1='-map_metadata'
   _meta2='-1'
  ;;

# Select Subtitle Stream (First Stream by default)
 -ss=*)
 _sstream="${opt#*=}"
 ;;

# Include the first Sub-Title stream.  By default all additional streams are stripped
# -sub|-subtitle)
# _sub1='-map'
# _sub2="0:s:0"
# _sub3='-scodec'
# _sub4='mov_text'
# _sub4='dvd_subtitle'
# _sub4='copy'
# ;;

# Determine Audio levels
 -level)
  _level=1
  _ss=0
  _stopTime=''
 ;;

# Set new framerate
 -fr=*|-framerate=*)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}fps=fps=${opt#*=}"
 ;;

# Burnin subtitles from first subtitle (text subtitle) stream
 -burn|burnin)
 _vf='-vf'
 test -z $_scale_vid || _scale_vid="${_scale_vid},"
 _scale_vid="${_scale_vid}BURNIN"
 ;;

 # Burnin Subtitles from exteral text (.srt) file
 -subfile=*)
 _vf='-vf'
 test -z $_scale_vid || _scale_vid="${_scale_vid},"
 _scale_vid="${_scale_vid}subtitles=${opt#*=}"
 ;;

# Video preset values (as per ffmpeg)
 -vpreset=*)
 _vpreset="${opt#*=}"
 ;;

# Afix metadata "Title" value. Note: this only encodes the FIRST file listed.
 -title=*)
  _title1='-metadata'
  _title2="title=${opt#*=}"
  ;;

# Compact mobile format
  -320)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=320:-2"
  ;;

# Encode for PAL Resolution
  -576)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=-2:576"
  ;;

# Encode for NTSC Resolution
  -480)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=-2:480"
  ;;

# Encode for 1280x720 (HDTV 720p) Resolution.
# I found this to be the most usefull.  The bandwidth is reasonable and
# most devices/computers can handle it well.  Chromecast is capable of
# 1080 resolution however it tends to saturate Wi-Fi.
  -720)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=-2:720"
  ;;

# Encode HDTV 1080 Resolution (not really recommended).
  -1080)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=-2:1080"
  ;;

#
  -640)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=640:-2"
  ;;
  
  -resize=*)
  _resize=$( echo "${opt#*=}" | tr 'x' ':' )
  _vf='vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  scale_vid="${_scale_vid}scale=${_resize}:force_original_aspect_ratio=decrease,pad=${_resize}:(ow-iw)/2:(oh-ih)/2,setsar=1"


  -800)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=800:-2"
  ;;

  -1280)
  _vf='-vf'
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=1280:-2"
  ;;

  -1920)
  _vf="-vf"
  test -z $_scale_vid || _scale_vid="${_scale_vid},"
  _scale_vid="${_scale_vid}scale=1920:-2"
  ;;

  -d=*|--destination-dir=*)
  _dest_dir="${opt#*=}"
  ;;

# Select alternate Audio Stream
 -astream=*|-as=*)
 _astream="${opt#*=}"
 ;;

# Select alternate Video Stream
 -vstream=*|-vs=*)
 _vstream="${opt#*=}"
 ;;

  *)
  if [ $_level ]
   then
     echo "Processing Audio Levels for $opt"
     ffmpeg -ss $_ss -i $opt -af "volumedetect" -f null /dev/null 2>&1 | egrep 'n_samples|mean_volume|max_volume' | cut -d' ' -f4-
   else
      if [ ! -d "$_dest_dir" ] ;then mkdir "$_dest_dir" ;fi
    #  echo time nice -n 15 ffmpeg -i "$opt" -strict -2 $_meta1 $_meta2 -map 0:v:0 $_vf $_scale_vid -vcodec $_vcodec -map 0:a:0 -acodec $_acodec $_af1 $_af2 \
    #   -movflags faststart "$_title1" "$_title2" $_dest_dir/$(sed 's/\....$/\.mp4/' <<< "$opt")

      #if [ $_scale_vid == "BURNIN" ]; then _scale_vid="subtitles=${opt}" ; echo $_scale_vid ; fi
      _scale_vid=$( sed "s/BURNIN/subtitles=${opt}/" <<< $_scale_vid )

      __vID=''
      __aID=''
      if [ $_vcodec != 'copy' ] ; then __vID=":${_vcodec}" ; fi
      if [ $_acodec != 'copy' ] ; then __aID=":${_acodec}" ; fi

      if [ $_title1 ] ; then

       $_DEBUG /usr/bin/time nice -n 15 ffmpeg $_hwaccel1 $_hwaccel2  -i "$opt" \
        -strict -2 $_meta1 $_meta2 \
        -map 0:v:${_vstream} $_vf $_scale_vid -vcodec $_vcodec \
        $_sub1 $_sub2 $_sub3 $_sub4 \
        -map 0:a:${_astream} -acodec $_acodec $_af1 $_af2 -metadata:s:a:1 language=eng \
        -movflags faststart \
        -metadata comment="${_name}-${_version}${__vID}${__aID}" \
        "$_title1" "$_title2" \
        $_dest_dir/$(sed 's/\....$/\.mp4/' <<< "$opt")
       exit

      else

       $_DEBUG /usr/bin/time nice -n 15 ffmpeg $_hwaccel1 $_hwaccel2 -i "$opt" \
        -strict -2 $_meta1 $_meta2 \
        -map 0:v:${_vstream} $_vf $_scale_vid -preset $_vpreset -vcodec $_vcodec \
        $_sub1 $_sub2 $_sub3 $_sub4 \
        -map 0:a:${_astream} -acodec $_acodec $_af1 $_af2 -metadata:s:a:1 language=eng \
        -movflags faststart \
        -metadata title="$(sed -r 's/\....$// ; s/_/ /g ; s/ S[0-9]{1,2}E[0-9]{1,2}/&:/' <<< $opt)" \
        -metadata comment="${_name}-${_version}${__vID}${__aID}" \
        $_dest_dir/$(sed 's/\....$/\.mp4/' <<< "$opt")

      fi
    fi
  ;;

esac



done
